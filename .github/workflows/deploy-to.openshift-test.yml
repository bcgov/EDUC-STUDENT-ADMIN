name: Deploy to TEST

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: ${{ secrets.PEN_NAMESPACE_NO_ENV }}-test

  SPLUNK_TOKEN: ${{ secrets.SPLUNK_TOKEN }}

  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}

  IMAGE_NAME: student-admin-backend-master
  DOCKER_ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca/docker-remote
  ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca

  APP_NAME: 'student-admin'
  REPO_NAME: "educ-student-admin"
  BRANCH: "master"
  APP_NAME_BACKEND: "student-admin-backend-master"
  APP_NAME_FRONTEND: "student-admin-frontend"
  APP_NAME_FRONTEND_MASTER: "student-admin-frontend-master"
  APP_NAME_FRONTEND_STATIC: "student-admin-frontend-static"
  NAMESPACE: ${{ secrets.PEN_NAMESPACE_NO_ENV }}
  NAMESPACE_TOOLS: ${{ secrets.PEN_NAMESPACE_NO_ENV }}-tools
  COMMON_NAMESPACE: ${{ secrets.COMMON_NAMESPACE_NO_ENV }}
  EDX_NAMESPACE: ${{ secrets.EDX_NAMESPACE_NO_ENV }}
  STUDENT_ASSESSMENT_NAMESPACE: ${{ secrets.STUDENT_ASSESSMENT_NAMESPACE_NO_ENV }}
  GDC_NAMESPACE: ${{ secrets.GDC_NAMESPACE_NO_ENV }}
  GRAD_STUDENT_NAMESPACE: ${{ secrets.GRAD_STUDENT_NAMESPACE_NO_ENV }}
  MIN_CPU: "300m"
  MAX_CPU: "600m"
  MIN_MEM: "250Mi"
  MAX_MEM: "500Mi"
  MIN_REPLICAS: "3"
  MAX_REPLICAS: "4"

  # SITE_URL should have no scheme or port. It will be prepended with https://
  HOST_ROUTE: ${{ secrets.SITE_URL }}

on:
  workflow_dispatch:

jobs:
  deploy-test:
    name: Deploy to TEST
    runs-on: ubuntu-22.04
    environment: test

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v6
        with:
          script: |
            const secrets = {
              OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
            };
            
            const GHCR = "ghcr.io";
            if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
              core.info(`Image registry is ${GHCR} - no registry password required`);
            }
            else {
              core.info("A registry password is required");
              secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
            }
            
            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`✔️ Secret "${name}" is set`);
              return false;
            });
            
            if (missingSecrets.length > 0) {
              core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`✅ All the required secrets are set`);
            }

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get latest tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

        # https://github.com/redhat-actions/oc-login#readme
      - uses: actions/checkout@v3
      - name: Deploy
        run: |
          set -eux
          # Login to OpenShift and select project
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
          oc project ${{ env.OPENSHIFT_NAMESPACE }}
          # Cancel any rollouts in progress
          oc rollout cancel deployment/${{ env.IMAGE_NAME }} 2> /dev/null \
          || true && echo "No rollout in progress"
          
          oc tag ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-frontend-static:${{ steps.get-latest-tag.outputs.tag }} ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-frontend-static:${{ steps.get-latest-tag.outputs.tag }}
          oc tag ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-backend-${{ env.BRANCH }}:${{ steps.get-latest-tag.outputs.tag }} ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-backend-${{ env.BRANCH }}:${{ steps.get-latest-tag.outputs.tag }}
          
          # Process and apply deployment template
          oc process -f tools/openshift/backend.deployment.yaml -p APP_NAME=${{ env.APP_NAME }} -p REPO_NAME=${{ env.REPO_NAME }} -p BRANCH=${{ env.BRANCH }} -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }} -p TAG=${{ steps.get-latest-tag.outputs.tag }} -p MIN_REPLICAS=${{ env.MIN_REPLICAS }} -p MAX_REPLICAS=${{ env.MAX_REPLICAS }} -p MIN_CPU=${{ env.MIN_CPU }} -p MAX_CPU=${{ env.MAX_CPU }} -p MIN_MEM=${{ env.MIN_MEM }} -p MAX_MEM=${{ env.MAX_MEM }} -p HOST_ROUTE=${{ env.HOST_ROUTE }}\
          | oc apply -f -
          
          # Process and apply deployment template
          oc process -f tools/openshift/frontend-static.deployment.yaml -p APP_NAME=${{ env.APP_NAME }} -p REPO_NAME=${{ env.REPO_NAME }} -p BRANCH=${{ env.BRANCH }} -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }} -p TAG=${{ steps.get-latest-tag.outputs.tag }} -p MIN_REPLICAS=${{ env.MIN_REPLICAS }} -p MAX_REPLICAS=${{ env.MAX_REPLICAS }} -p MIN_CPU=${{ env.MIN_CPU }} -p MAX_CPU=${{ env.MAX_CPU }} -p MIN_MEM=${{ env.MIN_MEM }} -p MAX_MEM=${{ env.MAX_MEM }} -p HOST_ROUTE=${{ env.HOST_ROUTE }}\
          | oc apply -f -
          
          curl -s https://raw.githubusercontent.com/bcgov/${{ env.REPO_NAME }}/${{ steps.get-latest-tag.outputs.tag }}/tools/config/update-configmap.sh | bash /dev/stdin prod ${{ env.APP_NAME }} ${{ env.NAMESPACE }} ${{ env.COMMON_NAMESPACE }} ${{ env.EDX_NAMESPACE }} ${{ env.STUDENT_ASSESSMENT_NAMESPACE }} ${{ env.GDC_NAMESPACE }} ${{ env.SPLUNK_TOKEN }} ${{env.GRAD_STUDENT_NAMESPACE}}
          
          echo "Waiting a few seconds before deploy..."
          sleep 10
          
          # Start rollout (if necessary) and follow it
          oc rollout restart deployment/${{ env.IMAGE_NAME }} 2> /dev/null \
          || true && echo "Rollout in progress"
          
          oc rollout restart deployment/${{ env.APP_NAME_FRONTEND_MASTER }} 2> /dev/null \
          || true && echo "Rollout in progress"
          # Get status, returns 0 if rollout is successful
          oc rollout status deployment/${{ env.IMAGE_NAME }}
          
          # Start second rollout and follow it
          oc rollout restart deployment/${{ env.IMAGE_NAME }} 2> /dev/null \
          || true && echo "Rollout in progress"
          
          # Get status, returns 0 if rollout is successful
          oc rollout status deployment/${{ env.IMAGE_NAME }}

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: 'https://${{ env.HOST_ROUTE }}'
